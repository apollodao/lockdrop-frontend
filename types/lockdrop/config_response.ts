/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.
 *
 * # Examples
 *
 * Use `from` to create instances of this and `u128` to get the value out:
 *
 * ``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);
 *
 * let b = Uint128::from(42u64); assert_eq!(b.u128(), 42);
 *
 * let c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```
 */
export type Uint128 = string;

export interface ConfigResponse {
  apollo_factory: Addr;
  astro_token: Addr;
  astroport_staking: Addr;
  /**
   * Number of seconds during which lockup deposits will be accepted
   */
  deposit_window: number;
  /**
   * Timestamp when Contract will start accepting LP Token deposits
   */
  init_timestamp: number;
  /**
   * Total APOLLO lockdrop incentives to be distributed among the users
   */
  lockdrop_incentives: Uint128;
  /**
   * Max. no. of weeks allowed for lockup
   */
  max_lock_duration: number;
  /**
   * Max lockup positions a user can have
   */
  max_positions_per_user: number;
  /**
   * Min. no. of weeks allowed for lockup
   */
  min_lock_duration: number;
  /**
   * Account which can update config
   */
  owner: Addr;
  /**
   * Withdrawal Window Length :: Post the deposit window
   */
  withdrawal_window: number;
  xastro_token: Addr;
  [k: string]: unknown;
}
